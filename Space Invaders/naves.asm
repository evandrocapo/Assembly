TITLE SPACE_INVANDERS
.MODEL SMALL
.STACK 100H
.DATA
	TESTE DB 'TEXTO$'
	TECLADO_BUFFER DB 0
	QTDLINHAS DB 0
	INTRO			DB	"",0AH,0DH,0AH,0DH
					DB	"        - - - SPACE INVADERS - - -$"
	START			DB	"     PRESSIONE ESPACO PARA JOGAR !!",0AH,0DH,0AH,0DH
					DB  "             INSERT A COIN !!","$"
	TIRO_DESTRUIDO DW 0
	X_BARREIRA_INICIAL DW 55
	Y_BARREIRA_INICIAL DW 150
	X_BARREIRA DW 0
	Y_BARREIRA DW 0
	X_INICIAL_PERSONAGEM DW 150
	Y_INICIAL_PERSONAGEM DW 180
	X_PERSONAGEM DW 0
	Y_PERSONAGEM DW 0
	X_INICIAL DW 50
	Y_INICIAL DW 20
	X_TIRO DW 0
	Y_TIRO DW 0
	TIRO_ON DW 0
	X DW 0
	Y DW 0
	POSICAODASTRING DW 0
	TAMANHOXNAVE DW 12
	TAMANHOYNAVE DW 11
	TAMANHOXBARREIRA DW 24
	TAMANHOYBARREIRA DW 18
	XPARAPRINTAR DW 0
	REPETIRYNAVE DW 0 
	REPETICAOXNAVEMULT DW 0
	REPETIRQUANTIDADENAVES DW 5
	BARREIRA_DESENHO DW  00,00,00,00,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00,00,00,00,00   
					 DW  00,00,00,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00,00,00,00 
					 DW  00,00,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00,00,00 
					 DW  00,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00,00 
					 DW  00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
					 DW  11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11 
					 DW  11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11 
					 DW  11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11 
					 DW  11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11 
					 DW  11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11 
					 DW  11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11 
					 DW  11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11 
					 DW  11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11 
					 DW  11,11,11,11,11,11,11,11,11,00,00,00,00,00,00,11,11,11,11,11,11,11,11,11 
					 DW  11,11,11,11,11,11,11,11,00,00,00,00,00,00,00,00,11,11,11,11,11,11,11,11 
					 DW  11,11,11,11,11,11,11,00,00,00,00,00,00,00,00,00,00,11,11,11,11,11,11,11 
					 DW  11,11,11,11,11,11,11,00,00,00,00,00,00,00,00,00,00,11,11,11,11,11,11,11  
					 DW  11,11,11,11,11,11,11,00,00,00,00,00,00,00,00,00,00,11,11,11,11,11,11,11 
	
	NAVE_PERSONAGEM DW  00,00,00,00,00,11,11,00,00,00,00,00  
					DW  00,00,00,00,11,11,11,11,00,00,00,00 
					DW  00,00,00,00,11,11,11,11,00,00,00,00 
					DW  00,00,00,00,11,11,11,11,00,00,00,00 
					DW  00,11,11,11,11,11,11,11,11,11,11,00 
					DW  11,11,11,11,11,11,11,11,11,11,11,11 
					DW  11,11,11,11,11,11,11,11,11,11,11,11 
					DW  11,11,11,11,11,11,11,11,11,11,11,11 
					DW  11,11,11,11,11,11,11,11,11,11,11,11 
					DW  11,11,11,11,11,11,11,11,11,11,11,11 
					DW  11,11,11,11,11,11,11,11,11,11,11,11 
					
	LIMPAR_PERSONAGEM DW  00,00,00,00,00,00,00,00,00,00,00,00  
					  DW  00,00,00,00,00,00,00,00,00,00,00,00 
					  DW  00,00,00,00,00,00,00,00,00,00,00,00 
					  DW  00,00,00,00,00,00,00,00,00,00,00,00 
					  DW  00,00,00,00,00,00,00,00,00,00,00,00 
					  DW  00,00,00,00,00,00,00,00,00,00,00,00 
					  DW  00,00,00,00,00,00,00,00,00,00,00,00 
					  DW  00,00,00,00,00,00,00,00,00,00,00,00 
					  DW  00,00,00,00,00,00,00,00,00,00,00,00 
					  DW  00,00,00,00,00,00,00,00,00,00,00,00 
					  DW  00,00,00,00,00,00,00,00,00,00,00,00 				
				
	NAVE1 DW  00,00,00,00,11,11,11,11,00,00,00,00  
		  DW  00,11,11,11,11,11,11,11,11,11,11,00 
		  DW  11,11,11,11,11,11,11,11,11,11,11,11 
		  DW  11,11,11,00,00,11,11,00,00,11,11,11 
		  DW  11,11,11,00,00,11,11,00,00,11,11,11 
		  DW  11,11,11,11,11,11,11,11,11,11,11,11 
		  DW  11,11,11,11,11,11,11,11,11,11,11,11 
		  DW  00,00,00,11,11,11,11,11,11,00,00,00 
		  DW  00,00,00,11,11,11,11,11,11,00,00,00 
		  DW  00,11,11,11,00,11,11,00,11,11,11,00 
		  DW  00,11,11,11,00,11,11,00,11,11,11,00 

	NAVE2 DW  00,00,00,00,11,11,11,11,00,00,00,00
		  DW  00,00,00,11,11,11,11,11,11,00,00,00
		  DW  00,00,11,11,11,11,11,11,11,11,00,00
		  DW  00,11,11,11,11,11,11,11,11,11,11,00
		  DW  11,11,11,11,11,11,11,11,11,11,11,11
		  DW  11,00,11,11,00,11,11,00,11,11,00,11
		  DW  11,00,11,11,00,11,11,00,11,11,00,11
		  DW  11,11,11,11,11,11,11,11,11,11,11,11
		  DW  00,11,11,11,11,00,00,11,11,11,11,00
		  DW  00,00,11,11,11,00,00,11,11,11,00,00
		  DW  00,00,00,11,00,00,00,00,11,00,00,00

	NAVE3 DW  00,00,11,00,00,00,00,00,00,11,00,00
		  DW  00,00,00,11,00,00,00,00,11,00,00,00
		  DW  00,00,11,11,11,11,11,11,11,11,00,00
		  DW  00,11,11,11,11,11,11,11,11,11,11,00
		  DW  11,11,11,11,11,11,11,11,11,11,11,11
		  DW  11,00,11,11,00,11,11,00,11,11,00,11
		  DW  11,00,11,11,00,11,11,00,11,11,00,11
		  DW  11,00,11,11,11,11,11,11,11,11,00,11
		  DW  00,00,11,11,00,00,00,00,11,11,00,00
		  DW  00,00,11,00,00,00,00,00,00,11,00,00
		  DW  00,00,00,11,11,00,00,11,11,00,00,00

	LISTA DW 7,3,5,2,1	  
	VALOR DW 0
.CODE

MAIN PROC
MOV AX, @DATA
MOV DS, AX

CALL MODO_VIDEO

CALL MENU
CALL BOTAO_PRESSIONADO_MENU1

CALL COMECAR_JOGO


MOV AH, 4CH
INT 21H
MAIN ENDP

COMECAR_JOGO PROC

MOV X_INICIAL, 50
MOV X_INICIAL_PERSONAGEM, 150
MOV Y_INICIAL, 20
MOV Y_INICIAL_PERSONAGEM, 180

CALL PRINTAR_TODOS_INVADERS
CALL NAVE_PRINTAR_PERSONAGEM
CALL BARREIRA

CALL RODANDO_O_JOGO

RET
COMECAR_JOGO ENDP




RODANDO_O_JOGO PROC
RODANDO_O_JOGO_INICIO:
MOV AH, 0H
INT 16H
JNZ TECLADO_DIGITADO
;CALL MOVER_INIMIGOS
JMP RODANDO_O_JOGO_INICIO

TECLADO_DIGITADO:
CMP AL,100
JZ DIREITA
CMP AL,97
JZ ESQUERDA
CMP AL,32
JZ TIRO
JMP RODANDO_O_JOGO_INICIO

DIREITA:
CALL LIMPAR_PERSONAGEM_PROC
ADD X_INICIAL_PERSONAGEM,2   ; VELOCIDADE
CALL NAVE_PRINTAR_PERSONAGEM
JMP RODANDO_O_JOGO_INICIO

ESQUERDA:
CALL LIMPAR_PERSONAGEM_PROC
SUB X_INICIAL_PERSONAGEM,2   ; VELOCIDADE
CALL NAVE_PRINTAR_PERSONAGEM
JMP RODANDO_O_JOGO_INICIO

TIRO:
CMP TIRO_ON,1
JZ TIRO_SUBIR_REP
CALL PRIMEIRO_TIRO
JMP TIRO_FIM_REP
TIRO_SUBIR_REP:
CALL SUBIR_TIRO
TIRO_FIM_REP:
JMP RODANDO_O_JOGO_INICIO

RET
RODANDO_O_JOGO ENDP



;------------------------------------------------------------ TIRO --------------------------------

PRIMEIRO_TIRO PROC
MOV TIRO_ON, 1

MOV AX, X_PERSONAGEM
MOV X_TIRO,AX
MOV AX, Y_PERSONAGEM
MOV Y_TIRO,AX
SUB Y_TIRO,12
ADD X_TIRO, 6

MOV AH,0Ch ; escrever pixel
MOV CX, X_TIRO ; X
MOV DX, Y_TIRO; Y
MOV AL,4 ; cor
INT 10h

PRIMEIRO_TIRO ENDP

SUBIR_TIRO PROC
SUB Y_TIRO, 12
MOV AH,0Ch ; escrever pixel
MOV CX, X_TIRO ; X
MOV DX, Y_TIRO ; Y
MOV AL,0 ; cor
INT 10h

CALL COMPARAR_O_TIRO
CMP AL,1
JMP FIM_SUBIR_TIRO

SUB Y_TIRO,1

MOV AH,0Ch ; escrever pixel
MOV CX, X_TIRO ; X
MOV DX, Y_TIRO ; Y
MOV AL,4 ; cor
INT 10h

FIM_SUBIR_TIRO:
RET
SUBIR_TIRO ENDP




COMPARAR_O_TIRO PROC
MOV AH,0DH ; LER UM PIXEL
MOV CX, Y_TIRO
MOV DX, X_TIRO
INT 10h

CMP AL, 2
JZ EXCLUIR_PIXEL
JMP FIM_COMPARAR_O_TIRO

EXCLUIR_PIXEL:
MOV AH,0Ch ; escrever pixel
MOV CX, X_TIRO ; X
MOV DX, Y_TIRO ; Y
MOV AL,0 ; cor
INT 10h

MOV TIRO_ON,0 ; REINCIAR O ESPACO PARA O TIRO

FIM_COMPARAR_O_TIRO:
RET
COMPARAR_O_TIRO ENDP

;------------------------------------------------------------ TIRO --------------------------------









LIMPAR_PERSONAGEM_PROC PROC


MOV AX,X_INICIAL_PERSONAGEM
MOV X_PERSONAGEM,AX
MOV AX,Y_INICIAL_PERSONAGEM
MOV Y_PERSONAGEM,AX

MOV CX,TAMANHOYNAVE
INICIO_LIMPAR_PERSONAGEM:
PUSH CX
MOV CX,TAMANHOXNAVE
CALL PERSONAGEM_LIMPANDO
ADD Y_PERSONAGEM,1
POP CX

MOV AX,X_INICIAL_PERSONAGEM
MOV X_PERSONAGEM,AX
LOOP INICIO_LIMPAR_PERSONAGEM

MOV POSICAODASTRING,0

RET
LIMPAR_PERSONAGEM_PROC ENDP


PERSONAGEM_LIMPANDO PROC
INICIO_PERSONAGEM_LIMPAR:
PUSH CX ; JOGA NA PILHA A QUANTIDADE DE REPETICAO DO EIXO X
MOV BX,POSICAODASTRING
MOV AX,[NAVE_PERSONAGEM + BX]


MOV AH,0Ch ; escrever pixel
MOV CX, X_PERSONAGEM ; X
MOV DX, Y_PERSONAGEM ; Y
MOV AL,0 ; cor
INT 10h


ADD X_PERSONAGEM,1 ;MOVIMENTA 1 PIXEL DA TELA A DIREITA
ADD POSICAODASTRING,2 ; ADICIONA 2 PARA QUE ENCONTRE O PROXIMO VALOR DA STRING OU NO CASO O DESENHO
POP CX ; RECUPERA A QUANTIDADE DE REPETICAO RESTANTE DO EIXO X
LOOP INICIO_PERSONAGEM_LIMPAR
RET
PERSONAGEM_LIMPANDO ENDP














;------------------------------------------------------------------ BARREIRA ----------------------------------------------------------


BARREIRA PROC
CALL PRINTAR_BARREIRA
ADD X_BARREIRA_INICIAL,60
CALL PRINTAR_BARREIRA
ADD X_BARREIRA_INICIAL,60
CALL PRINTAR_BARREIRA
ADD X_BARREIRA_INICIAL,60
CALL PRINTAR_BARREIRA

MOV X_BARREIRA_INICIAL,60 ; RETORNA O VALOR INICIAL DE X DA BARREIRA
RET
BARREIRA ENDP



PRINTAR_BARREIRA PROC
MOV AX,X_BARREIRA_INICIAL
MOV X_BARREIRA,AX
MOV AX,Y_BARREIRA_INICIAL
MOV Y_BARREIRA,AX

MOV CX,TAMANHOYBARREIRA
INICIO_PRINTAR_BARREIRA:
PUSH CX
MOV CX,TAMANHOXBARREIRA
CALL PRINTAR_BARREIRA_PIXEL
ADD Y_BARREIRA,1
POP CX

MOV AX,X_BARREIRA_INICIAL
MOV X_BARREIRA,AX
LOOP INICIO_PRINTAR_BARREIRA

MOV POSICAODASTRING,0

RET
PRINTAR_BARREIRA ENDP


PRINTAR_BARREIRA_PIXEL PROC
INICIO_BARREIRA_PRINT:
PUSH CX ; JOGA NA PILHA A QUANTIDADE DE REPETICAO DO EIXO X
MOV BX,POSICAODASTRING
MOV AX,[BARREIRA_DESENHO + BX]
CMP AX,11
JZ PRINTA_BRANCO1_BARREIRA

PRINTA_PRETO1_BARREIRA:
MOV AH,0Ch ; escrever pixel
MOV CX, X_BARREIRA ; X
MOV DX, Y_BARREIRA ; Y
MOV AL,0 ; cor
INT 10h
JMP PRINTADO1_BARREIRA

PRINTA_BRANCO1_BARREIRA:
MOV AH,0Ch ; escrever pixel
MOV CX, X_BARREIRA ; X
MOV DX, Y_BARREIRA ; Y
MOV AL,2 ; cor
INT 10h

PRINTADO1_BARREIRA:
ADD X_BARREIRA,1 ;MOVIMENTA 1 PIXEL DA TELA A DIREITA
ADD POSICAODASTRING,2 ; ADICIONA 2 PARA QUE ENCONTRE O PROXIMO VALOR DA STRING OU NO CASO O DESENHO
POP CX ; RECUPERA A QUANTIDADE DE REPETICAO RESTANTE DO EIXO X
LOOP INICIO_BARREIRA_PRINT
RET
PRINTAR_BARREIRA_PIXEL ENDP


;---------------------------------------------------------------- FIM BARREIRA --------------------------------------------------------




;------------------------------------------------------------------ PRINTAR INVADERS --------------------------------------------------

PRINTAR_TODOS_INVADERS PROC
MOV CX, 6 ; QUANTIDADE DE NAVES A DIREITA
REPETIR_TODOS_INVADERS_LOOP:
PUSH CX
CALL PRINTAR_INVADERS_TIPO1


CALL PRINTAR_INVADERS_TIPO2
ADD Y_INICIAL,20 ; ADD 20, PARA CRIAR A TERCEIRA FILEIRA IGUAL A NAVES TIPO 2
CALL PRINTAR_INVADERS_TIPO2
MOV Y_INICIAL,20 ; RETORNA O VALOR REAL DE Y_INICIAL = 20


CALL PRINTAR_INVADERS_TIPO3
ADD Y_INICIAL,20 ; ADD 20, PARA CRIAR A TERCEIRA FILEIRA IGUAL A NAVES TIPO 3
CALL PRINTAR_INVADERS_TIPO3
MOV Y_INICIAL,20 ; RETORNA O VALOR REAL DE Y_INICIAL = 20


ADD X_INICIAL, 40  ; DAR ESPAÇO DE 40 ENTRE OS ALIENS
POP CX
LOOP REPETIR_TODOS_INVADERS_LOOP
MOV X_INICIAL, 50 ; RETORNA VALOR INICIAL DE X
RET
PRINTAR_TODOS_INVADERS ENDP


; FUNÇÃO PARA PRINTAR 1 INVADER DE CADA TIPO

PRINTAR_INVADERS_TIPO1 PROC
MOV AX,X_INICIAL
MOV X,AX
MOV AX,Y_INICIAL
MOV Y,AX

MOV CX,TAMANHOYNAVE
INICIO_PRINTAR_INVADERS_NAVE1:
PUSH CX
MOV CX,TAMANHOXNAVE
CALL NAVE1_PRINT
ADD Y,1
POP CX

MOV AX,X_INICIAL
MOV X,AX
LOOP INICIO_PRINTAR_INVADERS_NAVE1

MOV POSICAODASTRING,0

RET
PRINTAR_INVADERS_TIPO1 ENDP


PRINTAR_INVADERS_TIPO2 PROC
MOV AX,X_INICIAL
MOV X,AX
MOV AX,Y_INICIAL
MOV Y,AX
ADD Y,20 ; ESPAÇAMENTO DE Y DA NAVE SUPERIOR

MOV CX,TAMANHOYNAVE
INICIO_PRINTAR_INVADERS_NAVE2:
PUSH CX
MOV CX,TAMANHOXNAVE
CALL NAVE2_PRINT
ADD Y,1
POP CX

MOV AX,X_INICIAL
MOV X,AX
LOOP INICIO_PRINTAR_INVADERS_NAVE2

MOV POSICAODASTRING,0

RET
PRINTAR_INVADERS_TIPO2 ENDP


PRINTAR_INVADERS_TIPO3 PROC
MOV AX,X_INICIAL
MOV X,AX
MOV AX,Y_INICIAL
MOV Y,AX
ADD Y,60 ; ESPAÇAMENTO DE Y DA NAVE SUPERIOR

MOV CX,TAMANHOYNAVE
INICIO_PRINTAR_INVADERS_NAVE3:
PUSH CX
MOV CX,TAMANHOXNAVE
CALL NAVE3_PRINT
ADD Y,1
POP CX

MOV AX,X_INICIAL
MOV X,AX
LOOP INICIO_PRINTAR_INVADERS_NAVE3

MOV POSICAODASTRING,0

RET
PRINTAR_INVADERS_TIPO3 ENDP

; FIM DA FUNÇÃO PARA PRINTAR 1 INVADER DE CADA TIPO



; FUNÇÃO PARA PRINTAR 1 PIXEL REFERENTE AO VETOR DA NAVE


NAVE1_PRINT PROC
INICIO_NAVE1_PRINT:
PUSH CX ; JOGA NA PILHA A QUANTIDADE DE REPETICAO DO EIXO X
MOV BX,POSICAODASTRING
MOV AX,[NAVE1 + BX]
CMP AX,11
JZ PRINTA_BRANCO1

PRINTA_PRETO1:
MOV AH,0Ch ; escrever pixel
MOV CX, X ; X
MOV DX, Y ; Y
MOV AL,0 ; cor
INT 10h
JMP PRINTADO1

PRINTA_BRANCO1:
MOV AH,0Ch ; escrever pixel
MOV CX, X ; X
MOV DX, Y ; Y
MOV AL,15 ; cor
INT 10h

PRINTADO1:
ADD X,1 ;MOVIMENTA 1 PIXEL DA TELA A DIREITA
ADD POSICAODASTRING,2 ; ADICIONA 2 PARA QUE ENCONTRE O PROXIMO VALOR DA STRING OU NO CASO O DESENHO
POP CX ; RECUPERA A QUANTIDADE DE REPETICAO RESTANTE DO EIXO X
LOOP INICIO_NAVE1_PRINT
RET
NAVE1_PRINT ENDP


NAVE2_PRINT PROC
INICIO_NAVE2_PRINT:
PUSH CX ; JOGA NA PILHA A QUANTIDADE DE REPETICAO DO EIXO X
MOV BX,POSICAODASTRING
MOV AX,[NAVE2 + BX]
CMP AX,11
JZ PRINTA_BRANCO2

PRINTA_PRETO2:
MOV AH,0Ch ; escrever pixel
MOV CX, X ; X
MOV DX, Y ; Y
MOV AL,0 ; cor
INT 10h
JMP PRINTADO2

PRINTA_BRANCO2:
MOV AH,0Ch ; escrever pixel
MOV CX, X ; X
MOV DX, Y ; Y
MOV AL,15 ; cor
INT 10h

PRINTADO2:
ADD X,1 ;MOVIMENTA 1 PIXEL DA TELA A DIREITA
ADD POSICAODASTRING,2 ; ADICIONA 2 PARA QUE ENCONTRE O PROXIMO VALOR DA STRING OU NO CASO O DESENHO
POP CX ; RECUPERA A QUANTIDADE DE REPETICAO RESTANTE DO EIXO X
LOOP INICIO_NAVE2_PRINT
RET
NAVE2_PRINT ENDP


NAVE3_PRINT PROC
INICIO_NAVE3_PRINT:
PUSH CX ; JOGA NA PILHA A QUANTIDADE DE REPETICAO DO EIXO X
MOV BX,POSICAODASTRING
MOV AX,[NAVE3 + BX]
CMP AX,11
JZ PRINTA_BRANCO3

PRINTA_PRETO3:
MOV AH,0Ch ; escrever pixel
MOV CX, X ; X
MOV DX, Y ; Y
MOV AL,0 ; cor
INT 10h
JMP PRINTADO3

PRINTA_BRANCO3:
MOV AH,0Ch ; escrever pixel
MOV CX, X ; X
MOV DX, Y ; Y
MOV AL,15 ; cor
INT 10h

PRINTADO3:
ADD X,1 ;MOVIMENTA 1 PIXEL DA TELA A DIREITA
ADD POSICAODASTRING,2 ; ADICIONA 2 PARA QUE ENCONTRE O PROXIMO VALOR DA STRING OU NO CASO O DESENHO
POP CX ; RECUPERA A QUANTIDADE DE REPETICAO RESTANTE DO EIXO X
LOOP INICIO_NAVE3_PRINT
RET
NAVE3_PRINT ENDP


; FIM DA FUNÇÃO PARA PRINTAR 1 PIXEL REFERENTE AO VETOR DA NAVE





;------------------------------------------------------------------ FIM PRINTAR INVADERS -------------------------------------------



















;------------------------------------------------------------------ PRINTAR PERSONAGEM ---------------------------------------------

NAVE_PRINTAR_PERSONAGEM PROC


MOV AX,X_INICIAL_PERSONAGEM
MOV X_PERSONAGEM,AX
MOV AX,Y_INICIAL_PERSONAGEM
MOV Y_PERSONAGEM,AX

MOV CX,TAMANHOYNAVE
INICIO_PRINTAR_PERSONAGEM:
PUSH CX
MOV CX,TAMANHOXNAVE
CALL PERSONAGEM_PRINT
ADD Y_PERSONAGEM,1
POP CX

MOV AX,X_INICIAL_PERSONAGEM
MOV X_PERSONAGEM,AX
LOOP INICIO_PRINTAR_PERSONAGEM

MOV POSICAODASTRING,0

RET
NAVE_PRINTAR_PERSONAGEM ENDP



PERSONAGEM_PRINT PROC
INICIO_PERSONAGEM_PRINT:
PUSH CX ; JOGA NA PILHA A QUANTIDADE DE REPETICAO DO EIXO X
MOV BX,POSICAODASTRING
MOV AX,[NAVE_PERSONAGEM + BX]
CMP AX,11
JZ PRINTA_BRANCO1_PERSONAGEM

PRINTA_PRETO1_PERSONAGEM:
MOV AH,0Ch ; escrever pixel
MOV CX, X_PERSONAGEM ; X
MOV DX, Y_PERSONAGEM ; Y
MOV AL,0 ; cor
INT 10h
JMP PRINTADO_NAVE_PERSONAGEM1

PRINTA_BRANCO1_PERSONAGEM:
MOV AH,0Ch ; escrever pixel
MOV CX, X_PERSONAGEM ; X
MOV DX, Y_PERSONAGEM ; Y
MOV AL,2 ; cor
INT 10h

PRINTADO_NAVE_PERSONAGEM1:
ADD X_PERSONAGEM,1 ;MOVIMENTA 1 PIXEL DA TELA A DIREITA
ADD POSICAODASTRING,2 ; ADICIONA 2 PARA QUE ENCONTRE O PROXIMO VALOR DA STRING OU NO CASO O DESENHO
POP CX ; RECUPERA A QUANTIDADE DE REPETICAO RESTANTE DO EIXO X
LOOP INICIO_PERSONAGEM_PRINT
RET
PERSONAGEM_PRINT ENDP
;------------------------------------------------------------------ FIM PRINTAR PERSONAGEM ------------------------------------------


;------------------------------------------------------------------ MENU ----------------------------------------

BOTAO_PRESSIONADO_MENU1 PROC
BOTAO_PRESSIONADO_MENU1_REPETIR:
MOV AH, 7H ; PEGA A TECLA DIGITADA E NAO PRINTA NO DOS!
INT 21H

CMP AL, 32 ; COMPARA PRA VER SE É ESPACO
JE BOTAO_ACCEPT ; SE SIM, FECHA O MENU E VAI PRO JOGO
JMP BOTAO_PRESSIONADO_MENU1_REPETIR

BOTAO_ACCEPT:

;limpa a tela
MOV CL,28
MOV QTDLINHAS,CL
CALL CLS

RET
BOTAO_PRESSIONADO_MENU1 ENDP




MENU PROC
CALL LINHA
LEA DX,INTRO
MOV AH,9H
INT 21H

;pula linha 10 vezes
MOV CL,10
MOV QTDLINHAS,CL
CALL CLS

LEA DX,START
MOV AH,9H
INT 21H

MENU ENDP





LINHA PROC
MOV AH,2H
MOV DL,0AH
INT 21H

MOV DL,0DH
INT 21H
RET
LINHA ENDP

CLS PROC
MOV CL,QTDLINHAS
MOV AH,2H
LOOPINGLINHA:
MOV DL,0AH
INT 21H
MOV DL,0DH
INT 21H
DEC CL
CMP CL,0
JNE LOOPINGLINHA
RET
CLS ENDP


;--------------------------------------------------------------- FIM MENU ----------------------------------------


























;------------------------------------------------------------------ SELECIONAR MODO VIDEO -------------------------------------------


MODO_VIDEO PROC
MOV AX,0A00h ; offset da memoria de video
MOV ES,AX ; offset para ES

MOV AH,0h ; modo display
MOV AX,13h ; 13h - 320x200,265 cores
INT 10h

RET
MODO_VIDEO ENDP

;------------------------------------------------------------------ FIM SELECIONAR MODO VIDEO ---------------------------------------



END MAIN